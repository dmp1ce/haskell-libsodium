module TestHelpers where

import Data.Text hiding (concatMap)
import Test.QuickCheck
import Foreign.C.Types
import Numeric

convertEndian :: [a] -> [a]
convertEndian (x1:x2:xs) = (convertEndian xs) ++ [x1,x2]
convertEndian xs = xs

-- | Useful for trimming Hexadecimal 'Text' for testing equality
trim0s :: Text -> Text
trim0s = dropAround ('0'==)

isHexEqual :: String -> String -> Bool
isHexEqual x y = (trim0s $ pack x) == (trim0s $ pack y)

-- | Pad hex generated by 'showHex' if required
padHex :: String -> String
padHex s = if odd $ Prelude.length s then '0':s else s


-- Quickcheck Arbirary modifiers
genSafeChar :: Gen Char
genSafeChar = elements ['a'..'z']

genSafeString :: Gen String
genSafeString = listOf genSafeChar

newtype SafeString = SafeString { unwrapSafeString :: String }
    deriving Show

instance Arbitrary SafeString where
    arbitrary = SafeString <$> genSafeString

showHexCUCharList :: [CUChar] -> String
showHexCUCharList cs = concatMap (padHex . (flip showHex "")) cs
